
#!/usr/bin/env node
/**
 * Script de d√©ploiement automatis√© pour Tontine CI
 * 
 * Ce script guide l'utilisateur √† travers le processus de d√©ploiement
 * et effectue les v√©rifications n√©cessaires avant le lancement.
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Script de D√©ploiement Tontine CI');
console.log('=====================================\n');

// V√©rifications pr√©liminaires
function checkPrerequisites() {
  console.log('üìã V√©rification des pr√©requis...\n');
  
  const checks = [
    {
      name: 'Node.js version',
      command: 'node --version',
      expected: 'v18',
    },
    {
      name: 'Expo CLI',
      command: 'expo --version',
      expected: '6.',
    },
    {
      name: 'EAS CLI',
      command: 'eas --version',
      expected: 'eas-cli/',
    },
  ];

  checks.forEach(check => {
    try {
      const result = execSync(check.command, { encoding: 'utf8' });
      const success = result.includes(check.expected);
      console.log(`${success ? '‚úÖ' : '‚ùå'} ${check.name}: ${result.trim()}`);
    } catch (error) {
      console.log(`‚ùå ${check.name}: Non install√©`);
    }
  });
  
  console.log('\n');
}

// V√©rification de la configuration
function checkConfiguration() {
  console.log('‚öôÔ∏è  V√©rification de la configuration...\n');
  
  const configFiles = [
    'app.json',
    'eas.json',
    'package.json',
  ];
  
  configFiles.forEach(file => {
    const exists = fs.existsSync(path.join(process.cwd(), file));
    console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  });
  
  console.log('\n');
}

// Guide de d√©ploiement interactif
function deploymentGuide() {
  console.log('üìñ Guide de D√©ploiement\n');
  
  const steps = [
    {
      title: '1. Configuration Backend',
      description: 'D√©ployez votre API sur Heroku, Railway ou DigitalOcean',
      commands: [
        'Configurez votre serveur de production',
        'Mettez √† jour API_BASE_URL dans services/apiService.ts',
        'Testez la connexion API',
      ],
    },
    {
      title: '2. Int√©grations Mobile Money',
      description: 'Configurez Orange Money, MTN MoMo et Wave',
      commands: [
        'Obtenez les cl√©s API de production',
        'Testez les paiements en sandbox',
        'Configurez les webhooks de callback',
      ],
    },
    {
      title: '3. Configuration App',
      description: 'Pr√©parez l\'application pour la production',
      commands: [
        'Mettez √† jour app.json avec vos informations',
        'Configurez les notifications push',
        'Pr√©parez les assets (ic√¥nes, screenshots)',
      ],
    },
    {
      title: '4. Build et D√©ploiement',
      description: 'Cr√©ez les builds de production',
      commands: [
        'eas build --platform android --profile production',
        'eas build --platform ios --profile production',
        'eas submit --platform all',
      ],
    },
  ];
  
  steps.forEach(step => {
    console.log(`\n${step.title}`);
    console.log(`${step.description}\n`);
    step.commands.forEach(command => {
      console.log(`  ‚Ä¢ ${command}`);
    });
  });
  
  console.log('\n');
}

// Commandes de build
function showBuildCommands() {
  console.log('üî® Commandes de Build\n');
  
  const commands = [
    {
      name: 'Build Android (APK pour test)',
      command: 'eas build --platform android --profile preview',
    },
    {
      name: 'Build Android (AAB pour Play Store)',
      command: 'eas build --platform android --profile production',
    },
    {
      name: 'Build iOS (pour App Store)',
      command: 'eas build --platform ios --profile production',
    },
    {
      name: 'Build toutes plateformes',
      command: 'eas build --platform all --profile production',
    },
    {
      name: 'Soumission Android',
      command: 'eas submit --platform android',
    },
    {
      name: 'Soumission iOS',
      command: 'eas submit --platform ios',
    },
  ];
  
  commands.forEach(cmd => {
    console.log(`${cmd.name}:`);
    console.log(`  ${cmd.command}\n`);
  });
}

// Checklist finale
function finalChecklist() {
  console.log('‚úÖ Checklist Finale de D√©ploiement\n');
  
  const checklist = [
    'Backend d√©ploy√© et accessible via HTTPS',
    'Base de donn√©es PostgreSQL configur√©e',
    'Au moins un fournisseur Mobile Money int√©gr√©',
    'Notifications push configur√©es',
    'Tests utilisateurs effectu√©s',
    'Politique de confidentialit√© r√©dig√©e',
    'Conditions d\'utilisation finalis√©es',
    'Ic√¥nes et screenshots pr√©par√©s',
    'Comptes d√©veloppeur cr√©√©s (Apple/Google)',
    'Builds de production cr√©√©s',
    '√âquipe de support pr√™te',
  ];
  
  checklist.forEach((item, index) => {
    console.log(`${index + 1}. [ ] ${item}`);
  });
  
  console.log('\n');
}

// Ressources utiles
function showResources() {
  console.log('üìö Ressources Utiles\n');
  
  const resources = [
    {
      name: 'Documentation Expo',
      url: 'https://docs.expo.dev/',
    },
    {
      name: 'Guide EAS Build',
      url: 'https://docs.expo.dev/build/introduction/',
    },
    {
      name: 'Orange Developer',
      url: 'https://developer.orange.com/',
    },
    {
      name: 'MTN MoMo Developer',
      url: 'https://momodeveloper.mtn.com/',
    },
    {
      name: 'App Store Connect',
      url: 'https://appstoreconnect.apple.com/',
    },
    {
      name: 'Google Play Console',
      url: 'https://play.google.com/console/',
    },
  ];
  
  resources.forEach(resource => {
    console.log(`‚Ä¢ ${resource.name}: ${resource.url}`);
  });
  
  console.log('\n');
}

// Ex√©cution du script
function main() {
  checkPrerequisites();
  checkConfiguration();
  deploymentGuide();
  showBuildCommands();
  finalChecklist();
  showResources();
  
  console.log('üéâ Bonne chance avec votre d√©ploiement !');
  console.log('Pour plus d\'aide, consultez le guide dans l\'app : Param√®tres ‚Üí Guide de Production\n');
}

// Ex√©cuter seulement si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  checkPrerequisites,
  checkConfiguration,
  deploymentGuide,
  showBuildCommands,
  finalChecklist,
  showResources,
};
